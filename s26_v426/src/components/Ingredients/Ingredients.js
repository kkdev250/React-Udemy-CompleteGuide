import React, { /*useState,*/ useReducer, useEffect, useCallback, useMemo } from 'react';

import IngredientForm from './IngredientForm';
import IngredientList from './IngredientList';
import ErrorModal from '../UI/ErrorModal';
import Search from './Search';

//przewaga useReducer nad useState: caÅ‚a logika w jednym miejscu:
const ingredientReducer = (currentIngredients, action) => { //currentIngredients - it's the old state, below we return new state
  switch (action.type) {
    case 'SET': 
      return action.ingredients;
    case 'ADD':
      return [...currentIngredients, action.ingredient];
    case 'DELETE':
      return currentIngredients.filter((ing) => ing.id !== action.id);
    default: 
      throw new Error('Should not get there');
  }
};

const httpReducer = (curHttpState, action) => {
  switch (action.type) {
    case 'SEND': 
      return { loading: true, error: null };
    case 'RESPONSE':
      return { ...curHttpState, loading: false };
    case 'ERROR':
      return { loading: false, error: action.errorMessage };
    case 'CLEAR':
      return { ...curHttpState, error: null };
    default: 
      throw new Error('Should not be reached!');
  }
}


function Ingredients() {
  const [userIngredients, dispatch] = useReducer(ingredientReducer, []); //userIngredients - state, [] - initial value
  const [httpState, dispatchHttp] = useReducer(httpReducer, {loading: false, error: null});
  //const [ userIngredients, setUserIngredients ] = useState([]); //userIngredients - state, [] - initial value
  //const [ isLoading, setIsLoading ] = useState(false); // isLoading - state, initial value: false
  //const [ error, setError] = useState(); //error - state, initial value - undefined

  /* we can get rid of this useEffect because we're fetching ingredients (and calling setUserIngredients) in Search component
  useEffect(() => { //this hook is executed AFTER EVERY render cycle of the component - like componentDidUpdate...
    fetch('https://react-my-burger-5d776.firebaseio.com/react-hooks-update/ingredients.json')
      .then(
        response => response.json()
      )
      .then(responseData => {
        const loadedIngredients = [];
        for (const key in responseData) {
          loadedIngredients.push({
            id: key,
            title: responseData[key].title,
            amount: responseData[key].amount,
          });
        }
        setUserIngredients(loadedIngredients);
      });
  }, []); //...but with [] passed as second arg of useEffect - this hook runs ONLY ONCE, like componentDidMount
  */

  useEffect(() => {
    console.log('RENDERING INGREDIENTS', userIngredients);
  }, [userIngredients]) //[array of external dependencies]  - this useEffect hook will run only after these render cycles where userIngredients changes

  const filteredIngredientHandler = useCallback(filteredIngredients => { //useCallback hook caches function inside, so the handler will not be changed after re-render
    //setUserIngredients(filteredIngredients);
    dispatch({
      type: 'SET',
      ingredients: filteredIngredients,
    });
  }, []);  //external dependencies array could be [setUserIngredients], but this setUserIngredients function will never change, it's guaranteed by useState

  const addIngredientHandler = useCallback(ingredient => {
    //setIsLoading(true);
    dispatchHttp({
      type: 'SEND',
    });
    fetch('https://react-my-burger-5d776.firebaseio.com/react-hooks-update/ingredients.json', {
      method: 'POST',
      body: JSON.stringify(ingredient),
      headers: { 'Content-Type': 'application/json' }
    })
      .then(response => {
        //setIsLoading(false);
        dispatchHttp({
          type: 'RESPONSE',
        });
        return response.json();
      })
      .then(responseData => {
        dispatch({
          type: 'ADD',
          ingredient: { id: responseData.name, ...ingredient },
        });
        // setUserIngredients(previousIngredients => [
        //   ...previousIngredients, 
        //   { id: responseData.name, ...ingredient } //'name' - id generated by Firebase
        // ]);
      });
  }, []);

  const removeIngredientHandler = useCallback(ingredientId => {
    //setIsLoading(true);
    dispatchHttp({
      type: 'SEND',
    });
    fetch(`https://react-my-burger-5d776.firebaseio.com/react-hooks-update/ingredients/${ingredientId}.json`, {
      method: 'DELETE',
    })
      .then(response => {
        //setIsLoading(false);
        dispatchHttp({
          type: 'RESPONSE',
        });
        dispatch({
          type: 'DELETE',
          id: ingredientId,
        });
        // setUserIngredients(previousIngredients => 
        //   previousIngredients.filter(ingredinet => ingredinet.id !== ingredientId)
        // );
      })
      .catch(error => {
        //setError('Something went wrong!');
        //setIsLoading(false);
        dispatchHttp({
          type: 'ERROR',
          errorMessage: 'Something went wrong!',
        });
      });
  }, []);

  const clearError = useCallback(() => {
    dispatchHttp({
      type: 'CLEAR',
    });
    //setError(null);
  }, []);

  const ingredientList = useMemo(() => {
    return (
      <IngredientList 
        ingredients={userIngredients} 
        onRemoveItem={removeIngredientHandler}
      />
    );
  }, [userIngredients, removeIngredientHandler]);

  return (
    <div className="App">
      {httpState.error && <ErrorModal onClose={clearError}>{httpState.error}</ErrorModal>}
      <IngredientForm 
        onAddIngredient={addIngredientHandler} 
        loading={httpState.loading}
      />

      <section>
        <Search onLoadIngredients={filteredIngredientHandler}/>
        {ingredientList}
      </section>
    </div>
  );
}

export default Ingredients;
